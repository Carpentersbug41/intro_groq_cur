import { getIronSession, IronSession, SessionOptions } from 'iron-session';
import { cookies } from 'next/headers';
import { kv } from './kv';
import { nanoid } from 'nanoid';

// The structure of the session data stored in our server-side KV store.
export interface SessionState {
  sessionId: string;
  currentStepId: string | null;
  namedMemory: { [key: string]: any };
  conversationHistory: { role: 'user' | 'assistant'; content: string }[];
}

// This is the type that will be stored in the cookie, just the ID.
interface SessionIdContainer {
  sessionId?: string;
}

const SESSION_TTL_SECONDS = 60 * 60 * 24; // 24 hours

export const sessionOptions: SessionOptions = {
    password: process.env.SECRET_COOKIE_PASSWORD as string,
    cookieName: 'ielts-ai-tutor-session',
    cookieOptions: {
      secure: process.env.NODE_ENV === 'production',
    },
};

export const defaultSessionData: Omit<SessionState, 'sessionId'> = {
  currentStepId: '0_start',
  namedMemory: {},
  conversationHistory: [],
};

async function getSessionFromCookie(): Promise<IronSession<SessionIdContainer>> {
    // This is the correct usage for App Router
    return getIronSession<SessionIdContainer>(await cookies(), sessionOptions);
}

export async function getSession(): Promise<SessionState> {
  const session = await getSessionFromCookie();

  let sessionId = session.sessionId;
  let sessionData: SessionState | null = null;

  if (sessionId) {
    try {
      sessionData = await kv.get(sessionId);
    } catch (error) {
      console.error("KV Error retrieving session:", error);
      sessionId = undefined; // Force re-creation
      sessionData = null;
    }
  }

  if (!sessionId || !sessionData) {
    const newSessionId = nanoid();
    sessionData = { sessionId: newSessionId, ...defaultSessionData };
    
    await kv.set(newSessionId, sessionData, { ex: SESSION_TTL_SECONDS });

    session.sessionId = newSessionId;
    await session.save();
    console.log(`[SESSION] New session created: ${newSessionId}`);
  }

  return sessionData as SessionState;
}

export async function saveSession(data: SessionState): Promise<void> {
  if (!data.sessionId) {
    console.error("[KV-ERROR] Attempted to save session without a session ID.");
    return;
  }
  await kv.set(data.sessionId, data, { ex: SESSION_TTL_SECONDS });
}

export async function destroySession(): Promise<void> {
  const session = await getIronSession<SessionIdContainer>(await cookies(), sessionOptions);
  const sessionId = session.sessionId;

  if (sessionId) {
    await kv.del(sessionId);
  }
  
  session.destroy();
}