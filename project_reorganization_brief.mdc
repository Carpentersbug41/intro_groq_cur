---
description: 
globs: 
alwaysApply: false
---
# Project Reorganization Brief for LLM

## Current State:
The current project structure suffers from inconsistencies and lacks clear organization. Specifically:
- File names are not consistently named following a clear convention.
# Project Reorganization Brief for LLM

## Current State:
The current project structure suffers from inconsistencies and lacks clear organization. Specifically:
- File names are not consistently named following a clear convention.
- Folder names are sometimes unclear or do not accurately reflect their contents.
- Some files are located in folders where they don't logically belong.
- The overall directory structure could be improved for better clarity and maintainability.

## Desired Outcome:
A well-organized project structure with:
- Consistent and descriptive file and folder naming conventions.
- A logical folder hierarchy that groups related files effectively.
- Improved discoverability and maintainability of project components.

## Task for LLM:
1.  **Analyze:** Examine the current file and folder structure of the project.
2.  **Propose:** Suggest a revised, more logical directory structure.
3.  **Rename:** Recommend new, consistent names for files and folders where necessary.
4.  **Relocate:** Identify files that should be moved to different folders for better organization.
5.  **Execute (Optional/If Possible):** Outline the steps (e.g., terminal commands, file operations) required to implement the proposed reorganization, or apply the changes directly if feasible within your capabilities.

# Strictly Focused IELTS Grading Prompts: Project Brief

## Objective
To ensure that each automated IELTS grading prompt (for Task Response, Coherence & Cohesion, Lexical Resource, and Grammatical Range & Accuracy) evaluates **only** its designated criterion, without overlap or cross-penalization.

---

## What We Did

1. **Isolated Each Criterion**
   - **Task Response (TR):**  
     Only grades structure, coverage of required elements, and presence/absence of new ideas.  
     Does **not** mention or penalize for grammar, vocabulary, awkward phrasing, or informality.
   - **Coherence & Cohesion (CC):**  
     Only grades logical flow and use of linking words.  
     Does **not** mention or penalize for structure, grammar, vocabulary, or idea accuracy.
   - **Lexical Resource (LR):**  
     Only grades vocabulary: range, precision, naturalness, appropriateness, and repetition.  
     Does **not** mention or penalize for structure, grammar, or idea coverage.
   - **Grammatical Range & Accuracy (GRA):**  
     Only grades grammar and punctuation.  
     Does **not** mention or penalize for structure, vocabulary, or idea coverage.

2. **Explicit Instructions in Each Prompt**
   - Each prompt now **explicitly instructs** the model to ignore all other criteria.
   - Example: "Do NOT mention or penalize for grammar, vocabulary, or idea coverage‚Äîthese are for other criteria."

3. **Band Descriptors and Rationales**
   - Band descriptors and rationale examples are **strictly limited** to the relevant criterion.
   - Example: LR rationale only discusses vocabulary, not structure or grammar.

4. **Example Rationales**
   - Each prompt includes sample rationales for Band 9 and Band 7, demonstrating the correct focus.

5. **No Cross-Penalization**
   - Errors in grammar, vocabulary, or structure are **never** mentioned in the rationale for a different criterion.
   - Each criterion is assessed in isolation, as per official IELTS marking standards.

---

## Why This Matters

- **Fairness:**  
  Candidates are not unfairly penalized multiple times for the same error.
- **Clarity:**  
  Feedback is clear, actionable, and relevant to the specific criterion.
- **Alignment with IELTS:**  
  Mirrors the real IELTS band descriptors and marking philosophy.

---

## Summary Table

| Prompt | What is Graded | What is Ignored |
|--------|----------------|-----------------|
| TR     | Structure, required elements, new ideas | Grammar, vocabulary, linking, idea accuracy |
| CC     | Logical flow, linking words | Structure, grammar, vocabulary, idea accuracy |
| LR     | Vocabulary (range, precision, naturalness, repetition) | Structure, grammar, idea coverage |
| GRA    | Grammar, punctuation | Structure, vocabulary, idea coverage |

---

## How to Use

- When writing or updating grading prompts for LLMs, **always specify** what to grade and what to ignore.
- Provide **example rationales** that only mention the relevant criterion.
- **Never cross-penalize** or comment on errors outside the scope of the current criterion.

---

**This approach ensures that automated IELTS grading is fair, focused, and aligned with best assessment practices.**

# üß© What is a Multistage Chatbot? (Simple Version)

A **multistage chatbot** is a conversational agent that guides the user through a sequence of steps, where each step (or "stage") has its own prompt and expects a user response before moving to the next. The conversation is structured and always knows which stage it is in.

## Key Features

- **Sequential Prompts:** The bot asks a question or gives an instruction, waits for the user's response, then moves to the next stage.
- **Stateful:** The bot keeps track of which stage the user is in, and may store user responses for use in later stages.
- **No "one-shot" interaction:** Unlike a simple Q&A bot, the conversation is structured and progresses through a series of steps.

---

# üõ†Ô∏è How to Implement a Multistage Chatbot (Minimal)

## 1. Define Your Stages

Each stage is just a prompt. You can represent this as an array of strings.

```js
// stages.js
export const STAGES = [
  "Welcome! Are you ready to begin?",
  "Please enter your name.",
  "What is your favorite color?",
  "Thank you! Conversation complete."
];
```

---

## 2. Track the Current Stage

Keep track of which stage the user is in with a simple index.

```js
let currentStageIndex = 0;
```

---

## 3. Handle User Input and Advance Stages

When the user responds, advance to the next stage and show the next prompt.

```js
function handleUserInput(userInput) {
  // Store userInput if needed
  currentStageIndex++;
  if (currentStageIndex < STAGES.length) {
    return STAGES[currentStageIndex];
  } else {
    return "End of conversation.";
  }
}
```

---

## 4. Integrate with Your Chatbot Framework

In a Next.js or Vercel AI SDK setup, store the `currentStageIndex` in the session or conversation state. On each user message, look up the current stage, process the input, and send the next prompt.

**Example (pseudo-code for an API route):**

```js
// In your API handler
import { STAGES } from './stages';

export default function handler(req, res) {
  const { userInput, currentStageIndex } = req.body;
  let nextStageIndex = currentStageIndex + 1;
  let nextPrompt = STAGES[nextStageIndex]
    ? STAGES[nextStageIndex]
    : "End of conversation.";
  res.json({
    nextPrompt,
    nextStageIndex
  });
}
```

---

# üìù Summary

- **Multistage chatbot** = a bot that guides users through a series of steps, each with its own prompt.
- **Implementation** = define an array of prompts, track the current stage, and advance through the stages as the user responds.
- **Integration** = store the stage index in session/conversation state, and use it to determine what prompt to show next.

---

> This approach is **simple** and **scalable**: you can add, remove, or reorder stages easily.
